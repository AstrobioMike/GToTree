## next: 
    # renaming if needed
        # for mapping file:
    # treeing
        # no workflow
    # build output tables
        # capture number of genes per genome from the filter_and_rename function output by returning the num variable
            # then write it to the .done file and stick it in the GenomeData class in the "all" rule
    # build output summary (including citations.txt)
    # move snakemake logs dir to tmp dir after run finished
        # kept in output dir during run is so it's easily findable if there is a problem while running
    # optional ko search
        # perform this on all genomes still, after preprocessing before dropping for other reasons
    # optional pfam search 
        # perform this on all genomes still, after preprocessing before dropping for other reasons
    # implement nucleotide mode :(
    # unit tests..... :( :( :(

    # add a GenomeData attribute for reason removed (genome.reason_removed)
        # implemented, but i need to go back and use it for everything before too-few-hit-filtering

    # add in checks for the total number of remaining genomes being >= 3
        # at start, and then after genome filtering

    # maybe add an ext variable somewhere so when working with amino acids we have .faa, and .fa when nucleotides in tmp outputs
        # right now i just did .fasta so it covers both

    # filter-genomes.smk currently runs whether it's needed or not
        # this is because i needed to produce the output files whether the step overall is needed or not
        # it's probably fine this way, but i guess i could check for the expected output files and only run it if
            # they are not present...

    # align-and-prepare-SCG-sets.smk runs whether it's needed or not
        # not sure there's any reason to leave this one this way
            # it isn't actually running all the alignments again if not needed, so it should be relatively quick
            # but it's probably unnecessarily confusing

    # maybe don't make --resume be auto, stop and tell the user to specify --resume or -F

conda create -n gtotree-dev -c astrobiomike -c conda-forge -c bioconda gtotree

conda activate gtotree-dev
conda install tqdm=4.67.1
conda install pyhmmer=0.11.0
conda install snakemake=8.30.0
pip install -e gtotree/

# example test
rm -rf gtotree-output/ ; gtotree2 -a ncbi-accessions.txt -H Universal -j 4

gtotree2 -a ncbi_accessions.txt -g genbank_files.txt -A amino_acid_files.txt -f fasta_files.txt -H Universal -j 4 -t -P

GToTree -a ncbi_accessions.txt -g genbank_files.txt -A amino_acid_files.txt -f fasta_files.txt -H Universal -j 4 -t -P -F

gtotree2 -a ncbi_accessions.txt -g GToTree-test-data/genbank_files.txt -f GToTree-test-data/fasta_files.txt -A GToTree-test-data/amino_acid_files.txt -j 4 -t -P

### OVERALL NOTES ###
# add a stop at "Summary of input-genome preprocessing" to check there are 3 or more as needed to make a tree
# need a lot of testing on resume functionality
    # if i count on the resume flag for operating, i may need to make sure it makes sense up front (like does the run-data.json exist)
# need some check and handling if the input files changed when doing a resume
    # maybe just check and require they haven't changed at all, if so a totally new run is needed
# when a resume is done, may want to just try snakemake workflows on inputs that failed the prior runs
# add snakemake to definite citations
# since multiple logs may be created with --resume function, might need to add functionality to back up a log that exists to a sub-dir,
    # maybe with a time/date stamp of when first run appended to the name
# eventually look into putting a block for this prodigal failure: "at least 100000 bases for training." (search original files)
    # maybe just make a check that input genomes are greater than 100,000 bases (if that consistently triggers it)
# eventually add a check that nucleotide fasta inputs are nucleotide and not amino acid, and vice versa
# eventually do something with gunzipped files we generated (probably delete them, leaving the originals)

### TO DO ###

# switch to only using http when available
    # affects:
        # get_ncbi_assembly_tables.py (DONE)
        # ncbi assembly downloads (DONE)
        # kofamscan data is only available via ftp (maybe host this somewhere else for GToTree)



### CHANGES ###

# default output changed to "gtotree-output"
# default lineage settings are D,P,C,S (no longer strain)
# http is used instead of ftp always where available (used to be ftp by default with http option)
# several output files and dirs had underscores changed to dashes (sorry, i now hate underscores when they're not necessary)
# estimated percent completion and redundancy are no long provided
    # (this was always just "free" info, but checkm2 is a much better way to do this, so i made the decision to stop providing it at all)
# --resume flag added (will be set automatically if the same output dir but no `-F` flag provided)
# taxids are no longer searched for in input genbank files, they will only be found/used for provided input ncbi-accessions
    # if this is actually a feature that benefitted anyone, i'll add it back in upon request :)
# the order of processing changed slightly from v1 to v2, so the output report messages vary a little
    # in v1, each genome was downloaded/parsed and scanned for the target genes in one pass
    # in v2, all input genomes are prepared for each input source, then all are searched together

### PLACES TO DEF IMPROVE ###


### IMPROVEMENTS to highlight in paper ###

# python packaging and structure (rather than 4,000 lines of bash as main runner with dozens of individual python helper scripts)
# instead of just exiting and informing when input files have problems, GToTree2 fixes them
    # e.g., duplicate entries will be unique'd, windows line-endings will be converted, changes written to a new file that is then used
# snakemake control over the main components for easier restart capabilities
# things i've added over time
    # gtt-gen-SCG-HMMs
    # gtt-get-GTDB-accessions
    # gtt-subset...
    # new prepackaged HMMs based on GTDB taxonomy
    # in tandem scanning of target KOs or pfams, files for added vizualization in iToL
    # pre-built HMMs stored remotely and downloaded when used, to slim package size and install time
    # partitions.txt file produced suitable for mixed-model treeing like with iqtree


### """
# In its first 6 years, the original GToTree received over 500 citations and has been
# successfully regularly maintained over this time despite its foundation being a main runner 
# of ~4,000 lines of BASH and dozens of independent python and BASH helper scripts with a lot 
# of redundancy in its code base. Among several other improvements and feature additions, GToTree 
# has now been rewritten from the ground up in python with its major stages being powered by 
# Snakemake workflows - enabling the resuming of failed or interrupted runs.
### """
