

#############################################################################
###########################  SOME LAST ADJUSTMENTS  #########################
#############################################################################

# starting an all genomes file to keep track of those from all sources
touch ${tmp_dir}/genomes_from_all_sources.tmp

# starting the SCG-counts per genome tab which will have the following as its header:
paste <(printf "assembly_id") <(printf %s "$(cat ${tmp_dir}/uniq_hmm_names.tmp | tr "\n" "\t" | sed 's/.$//')") > ${output_dir}/SCG_hit_counts.tsv

#############################################################################
########################  KEEPING TRACK OF RUN TIME  ########################
#############################################################################
start_time=$(date +"%I:%M %p")
SECONDS=0


#############################################################################
######  GETTING AND BUILDING NEEDED KO STUFF IF USER WANTS KO SCANNING  #####
#############################################################################
if [ "$ko_targets" != 'false' ]; then

    printf "\n ############################################################################## \n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
    printf " ####                     Setting up HMMs for KO targets                   ####\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
    printf " ############################################################################## \n\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )

    # making output dirs
    mkdir -p ${output_dir}/KO_search_results/target_KO_profiles/
    mkdir -p ${output_dir}/KO_search_results/KO_hit_seqs/
    mkdir -p ${output_dir}/KO_search_results/iToL_files/
    mkdir -p ${output_dir}/KO_search_results/individual_genome_results/

    gtt-parse-kofamscan-targets.sh ${target_KOs} ${output_dir}

fi


#############################################################################
##########  GETTING AND BUILDING ADDITIONAL TARGET PFAM HMM IF SET  #########
#############################################################################
if [ "$additional_pfam_targets" != 'false' ]; then

    printf "\n ############################################################################## \n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
    printf " ####              Downloading HMMs for additional Pfam targets            ####\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
    printf " ############################################################################## \n\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )

    # making output dirs
    mkdir -p ${output_dir}/Pfam_search_results/target_Pfam_profiles/
    mkdir -p ${output_dir}/Pfam_search_results/Pfam_hit_seqs/
    mkdir -p ${output_dir}/Pfam_search_results/iToL_files/
    mkdir -p ${output_dir}/Pfam_search_results/individual_genome_results/
    mkdir -p ${output_dir}/Pfam_search_results/info/

    gtt-get-additional-pfam-targets.sh ${tmp_dir} ${output_dir}

fi


#############################################################################
######################  MAKING SUMMARY TABLE WITH ALL  ######################
#############################################################################
if [ -f ${output_dir}/NCBI_genomes_summary_info.tsv ]; then
    cut -f 1,4,9,10,11,12 ${output_dir}/NCBI_genomes_summary_info.tsv | tail -n +2 >> ${tmp_dir}/building_genomes_tab.tmp
fi

if [ -f ${output_dir}/Genbank_genomes_summary_info.tsv ]; then
    cut -f 1,3,6,7,8,9 ${output_dir}/Genbank_genomes_summary_info.tsv | tail -n +2 >> ${tmp_dir}/building_genomes_tab.tmp
fi

if [ -f ${output_dir}/Fasta_genomes_summary_info.tsv ]; then
    cut -f 1,3,4,5,6,7 ${output_dir}/Fasta_genomes_summary_info.tsv | tail -n +2 >> ${tmp_dir}/building_genomes_tab.tmp
fi

if [ -f ${output_dir}/Amino_acid_genomes_summary_info.tsv ]; then
    cut -f 1,3,4,5,6,7 ${output_dir}/Amino_acid_genomes_summary_info.tsv | tail -n +2 >> ${tmp_dir}/building_genomes_tab.tmp
fi

## getting current ordered list of all genomes together:
cut -f 1 ${tmp_dir}/building_genomes_tab.tmp | sort > ${tmp_dir}/sorted_all_output_genome_ids.tmp

## adding columns stating whether genome made it into the final tree, how many SCG-hits they had after length filtering, and how many genes they contributed to final alignment if they weren't removed
# first getting which were removed from analysis due to too few hits, if any:
if [ $removed_genomes != "0" ]; then
    sort <(tail -n +2 ${output_dir}/Genomes_removed_for_too_few_hits.tsv | cut -f1) > ${tmp_dir}/sorted_genomes_removed_for_too_few_hits.tmp

    # getting a list of those that weren't removed to iterate over
    comm -23 ${tmp_dir}/sorted_all_output_genome_ids.tmp ${tmp_dir}/sorted_genomes_removed_for_too_few_hits.tmp | sort > ${tmp_dir}/sorted_genomes_not_removed.tmp

    ## getting table of those that were removed
    for genome in $(cat ${tmp_dir}/sorted_genomes_removed_for_too_few_hits.tmp)
    do
        grep -m1 -w "^$genome" ${tmp_dir}/building_genomes_tab.tmp >> ${tmp_dir}/building_genomes_tab_for_removed_genomes.tmp
        grep -m1 -w "^$genome" ${tmp_dir}/counts_tab.tmp | cut -f 2 >> ${tmp_dir}/reporting_SCG_counts_after_len_filt_for_genomes_removed.tmp
        echo "No" >> ${tmp_dir}/reporting_that_not_in_final_tree_column.tmp
    done

    # adding columns on:
    paste ${tmp_dir}/building_genomes_tab_for_removed_genomes.tmp ${tmp_dir}/reporting_SCG_counts_after_len_filt_for_genomes_removed.tmp ${tmp_dir}/reporting_that_not_in_final_tree_column.tmp > ${tmp_dir}/genomes_tab_for_removed_genomes.tmp

    ## getting table of those that weren't removed
    for genome in $(cat ${tmp_dir}/sorted_genomes_not_removed.tmp)
    do
        grep -m1 -w "^$genome" ${tmp_dir}/building_genomes_tab.tmp >> ${tmp_dir}/building_genomes_tab_for_retained_genomes.tmp
        grep -m1 -w "^$genome" ${tmp_dir}/counts_tab.tmp | cut -f 2 >> ${tmp_dir}/reporting_SCG_counts_after_len_filt_for_genomes_retained.tmp
        echo "Yes" >> ${tmp_dir}/reporting_that_in_final_tree_column.tmp
    done

    # adding columns on:
    paste ${tmp_dir}/building_genomes_tab_for_retained_genomes.tmp ${tmp_dir}/reporting_SCG_counts_after_len_filt_for_genomes_retained.tmp ${tmp_dir}/reporting_that_in_final_tree_column.tmp > ${tmp_dir}/genomes_tab_for_retained_genomes.tmp


    ## combining both together
    cat ${tmp_dir}/genomes_tab_for_retained_genomes.tmp ${tmp_dir}/genomes_tab_for_removed_genomes.tmp > ${tmp_dir}/building_genomes_tab.tmp

else
    # if there are no genomes to remove, then generating two new columns for all
    for genome in $(cat ${tmp_dir}/sorted_all_output_genome_ids.tmp)
    do
        grep -m1 -w "^$genome" ${tmp_dir}/building_genomes_tab.tmp >> ${tmp_dir}/building_genomes_tab_for_retained_genomes.tmp
        grep -m1 -w "^$genome" ${tmp_dir}/counts_tab.tmp | cut -f 2 >> ${tmp_dir}/reporting_SCG_counts_after_len_filt_for_genomes_retained.tmp
        echo "Yes" >> ${tmp_dir}/reporting_that_in_final_tree_column.tmp
    done

    # adding columns on:
    paste ${tmp_dir}/building_genomes_tab_for_retained_genomes.tmp ${tmp_dir}/reporting_SCG_counts_after_len_filt_for_genomes_retained.tmp ${tmp_dir}/reporting_that_in_final_tree_column.tmp > ${tmp_dir}/building_genomes_tab.tmp

fi


# and adding header and writing to output directory
cat <(printf "assembly_id\ttaxid\tnum_SCG_hits\tuniq_SCG_hits\tperc_comp\tperc_redund\tnum_SCG_hits_after_len_filt\tin_final_tree\n") ${tmp_dir}/building_genomes_tab.tmp > ${output_dir}/Genomes_summary_info.tsv



#############################################################################
################  COMBINING KO SEARCHING RESULTS IF NEEDED  #################
#############################################################################
if [ ${ko_targets} != 'false' ]; then

    printf "\n ############################################################################## \n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
    printf " ##########            Combining KO searching results               ###########\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
    printf " ############################################################################## \n\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )

    gtt-combine-kofamscan-results.sh ${tmp_dir}/genomes_from_all_sources.tmp ${tmp_dir} ${output_dir} ${target_KOs}

    gtt-gen-KO-iToL-files.sh ${tmp_dir} ${output_dir}

fi


#############################################################################
##########  WRITING OUT ADDITIONAL TARGET PFAM RESULTS IF NEEDED  ###########
#############################################################################

if [ $additional_pfam_targets != 'false' ]; then

    printf "\n ############################################################################## \n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
    printf " ####            Parsing results of additional Pfam searches               ####\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
    printf " ############################################################################## \n\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )

    gtt-gen-pfam-iToL-files.sh ${tmp_dir} ${output_dir}

fi


#############################################################################
#############  CLEARING OUT TMP FILES UNLESS -d FLAG PROVIDED  ##############
#############################################################################
# keeping individual alignment files if -k was provided
if [ $keep_individual_alignments == 'true' ]; then
    mkdir ${output_dir}/run_files/individual_alignments

    for file in ${tmp_dir}/*_all_aligned${target_gene_suffix}
    do
        new_path="${output_dir}/run_files/individual_alignments/$(basename $(echo ${file%%_all_aligned${target_gene_suffix}}))_aln${target_gene_suffix}"
        mv ${file} ${new_path}
    done

fi

# saving output dir if -d was provided, removing if not
if [ ${debug_flag} == 'false' ]; then
    rm -rf ${tmp_dir}
else
    mv ${tmp_dir} ${output_dir}
fi



#############################################################################
##########################  ORGANIZING OUTPUT DIR  ##########################
#############################################################################
if [ -f ${output_dir}/NCBI_genomes_summary_info.tsv ]; then
    mv ${output_dir}/NCBI_genomes_summary_info.tsv ${output_dir}/run_files/NCBI_genomes_summary_info.tsv
fi

if [ -f ${output_dir}/Genbank_genomes_summary_info.tsv ]; then
    mv ${output_dir}/Genbank_genomes_summary_info.tsv ${output_dir}/run_files/Genbank_genomes_summary_info.tsv
fi

if [ -f ${output_dir}/Fasta_genomes_summary_info.tsv ]; then
    mv ${output_dir}/Fasta_genomes_summary_info.tsv ${output_dir}/run_files/Fasta_genomes_summary_info.tsv
fi

if [ -f ${output_dir}/Amino_acid_genomes_summary_info.tsv ]; then
    mv ${output_dir}/Amino_acid_genomes_summary_info.tsv ${output_dir}/run_files/Amino_acid_genomes_summary_info.tsv
fi


#############################################################################
##########################  JOB-FINISHED REPORTING  #########################
#############################################################################
printf "\n\n#################################################################################\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
printf "####                                 ${GREEN}Done!!${NC}                                  ####\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
printf "#################################################################################\n\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )

# genome report
if [ $genomes_retained == $total_input_genomes ]; then
    printf "            ${GREEN}All $total_input_genomes input genomes were retained through the workflow!${NC}\n\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
else
    printf "  Overall, $genomes_retained genomes of the input $total_input_genomes were retained (see notes below).\n\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
fi

# reporting primary output files
output_file_prefix=$(basename ${output_dir})

if [ $align_only == 'false' ]; then

    if [ -s ${output_dir}/Aligned_SCGs_mod_names${target_gene_suffix} ]; then

        printf "    Tree written to:\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
        printf "        ${GREEN}${output_dir}/${output_file_prefix}.tre${NC}\n\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
        mv ${output_dir}/Aligned_SCGs_mod_names.tre ${output_dir}/${output_file_prefix}.tre
    else
        printf "    Tree written to:\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
        printf "        ${GREEN}${output_dir}/${output_file_prefix}.tre${NC}\n\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
        mv ${output_dir}/Aligned_SCGs.tre ${output_dir}/${output_file_prefix}.tre
    fi

fi

if [ -s ${output_dir}/Aligned_SCGs_mod_names${target_gene_suffix} ]; then
    printf "    Alignment written to:\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
    printf "        ${GREEN}${output_dir}/Aligned_SCGs_mod_names${target_gene_suffix}${NC}\n\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
    mv ${output_dir}/Aligned_SCGs${target_gene_suffix} ${output_dir}/run_files/Aligned_SCGs${target_gene_suffix}
else
    printf "    Alignment written to:\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
    printf "        ${GREEN}${output_dir}/Aligned_SCGs${target_gene_suffix}${NC}\n\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
fi

if [ $keep_individual_alignments == 'true' ]; then
    printf "    Individual protein alignments stored in:\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
    printf "        ${GREEN}${output_dir}/run_files/individual_alignments/${NC}\n\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
fi

printf "    Main genomes summary table written to:\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
printf "        ${GREEN}${output_dir}/Genomes_summary_info.tsv${NC}\n\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )

printf "    Summary table with hits per target gene per genome written to:\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
printf "        ${GREEN}${output_dir}/SCG_hit_counts.tsv${NC}\n\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )


if [ $ko_targets == 'true' ]; then
    printf "    Outputs from KO searching written to:\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
    printf "        ${GREEN}${output_dir}/KO_search_results/${NC}\n\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
fi

if [ $additional_pfam_targets == 'true' ]; then
    printf "    Outputs from Pfam searching written to:\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
    printf "        ${GREEN}${output_dir}/Pfam_search_results/${NC}\n\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
fi

printf "    Partitions file (for downstream use with mixed-model treeing) written to:\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
printf "        ${GREEN}${output_dir}/run_files/Partitions.txt${NC}\n\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
mv ${output_dir}/Partitions.txt ${output_dir}/run_files/Partitions.txt

# reporting any problem files/accessions and mentioning run_files/ directory
printf " _______________________________________________________________________________\n\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )

if [ -f ${output_dir}/Redundant_input_accessions.txt ] || [ -f ${output_dir}/NCBI_accessions_not_found.txt ] || [ -f ${output_dir}/NCBI_accessions_not_downloaded.txt ] || [ -f ${output_dir}/Genomes_removed_for_too_few_hits.tsv ] || [ -f ${output_dir}/Genes_with_no_hits_to_any_genomes.txt ] || [ -f ${output_dir}/Genes_with_no_hits_after_length_filter.txt ] || [ -f ${output_dir}/Genomes_with_questionable_redundancy_estimates.tsv ]; then

    printf "  Notes:\n\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )

    if [ -f ${output_dir}/Redundant_input_accessions.txt ]; then
        printf "        $num_dupe_report accession(s) redundant.\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
        mv ${output_dir}/Redundant_input_accessions.txt ${output_dir}/run_files/Redundant_input_accessions.txt
    fi

    if [ -f ${output_dir}/NCBI_accessions_not_found.txt ]; then
        num_accs_not_found=$(wc -l ${output_dir}/NCBI_accessions_not_found.txt | sed "s/^ *//" | cut -d " " -f 1)
        printf "        $num_accs_not_found accession(s) not successfully found at NCBI.\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
        mv ${output_dir}/NCBI_accessions_not_found.txt ${output_dir}/run_files/NCBI_accessions_not_found.txt
    fi

    if [ -f ${output_dir}/NCBI_accessions_not_downloaded.txt ]; then
        num_accs_not_downloaded=$(wc -l ${output_dir}/NCBI_accessions_not_downloaded.txt | sed "s/^ *//" | cut -d " " -f 1)
        printf "        $num_accs_not_downloaded did not download properly.\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
        mv ${output_dir}/NCBI_accessions_not_downloaded.txt ${output_dir}/run_files/NCBI_accessions_not_downloaded.txt
    fi

    if [ -f ${output_dir}/Genomes_removed_for_too_few_hits.tsv ]; then
        printf "        $removed_genomes genome(s) removed due to having too few hits to the targeted SCGs.\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
        mv ${output_dir}/Genomes_removed_for_too_few_hits.tsv ${output_dir}/run_files/Genomes_removed_for_too_few_hits.tsv
    fi

    # reporting of unsucessful targets depends on if run in best-hit mode (-B) or not
    if [ $best_hit_mode != "true" ]; then

        if [ -f ${output_dir}/run_files/Target-genes-not-found-or-retained.txt ]; then
            printf "        $removed_genes gene(s) either had no hits or only multiple hits in each genome.\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
        fi

    else

        if [ -f ${output_dir}/Target_genes_not_found.txt ]; then
            printf "        $removed_genes gene(s) had no hits in any genome.\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
            mv ${output_dir}/Target_genes_not_found.txt ${output_dir}/run_files/Target_genes_not_found.txt
        fi

    fi


    if [ -f ${output_dir}/Genes_with_no_hits_after_length_filter.txt ]; then
        printf "        $removed_genes2 gene(s) had no hits after filtering by length.\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
        mv ${output_dir}/Genes_with_no_hits_after_length_filter.txt ${output_dir}/run_files/Genes_with_no_hits_after_length_filter.txt
    fi

    if [ -f ${output_dir}/Genomes_with_questionable_redundancy_estimates.tsv ]; then
        num_genomes_high_redund=$(tail -n +2 ${output_dir}/Genomes_with_questionable_redundancy_estimates.tsv | wc -l | sed "s/^ *//" | cut -d " " -f 1)
        printf "        $num_genomes_high_redund genome(s) had an estimated redundancy of >= 10%%.\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
        mv ${output_dir}/Genomes_with_questionable_redundancy_estimates.tsv ${output_dir}/run_files/Genomes_with_questionable_redundancy_estimates.tsv
    fi

    printf "\n    Reported along with additional informative run files in:\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
    printf "        ${GREEN}${output_dir}/run_files/${NC}\n\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )

else

    printf "    Additional informative run files can be found in:\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
    printf "        ${GREEN}${output_dir}/run_files/${NC}\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )

fi

printf " _______________________________________________________________________________\n\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )

# reporting log file output
printf "    Log file written to:\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
printf "        ${GREEN}${output_dir}/gtotree-runlog.txt${NC}\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )

printf " _______________________________________________________________________________\n\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )

### checking programs used and reporting a citations file ###
printf "    ${YELLOW}Programs used and their citations have been written to:\n${NC}" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )
printf "        ${GREEN}${output_dir}/citations.txt${NC}\n\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )

printf " _______________________________________________________________________________\n\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )

printf "GToTree ${VERSION}\nLee MD. GToTree: a user-friendly workflow for phylogenomics. Bioinformatics. 2019; (March):1-3. doi.org/10.1093/bioinformatics/btz188\n\n" >> ${output_dir}/citations.txt

hmm_version=$(hmmsearch -h | head -n 2 | tail -n 1 | tr -s " " "\t" | cut -f 3)
printf "HMMER3 v${hmm_version}\nEddy SR. Accelerated profile HMM searches. PLoS Comput. Biol. 2011; (7)10. doi.org/10.1371/journal.pcbi.1002195\n\n" >> ${output_dir}/citations.txt

muscle_version=$(muscle -version | tr -s " " "\t" | cut -f 2 | head -n 1)
printf "Muscle ${muscle_version}\nEdgar RC. MUSCLE v5 enables improved estimates of phylogenetic tree confidence by ensemble bootstrapping. bioRxiv. 2021.06.20.449169. doi.org/10.1101/2021.06.20.449169\n\n" >> ${output_dir}/citations.txt

trimal_version=$(trimal --version | grep "trim" | tr -s " " "\t" | cut -f 2)
printf "TrimAl ${trimal_version}\nGutierrez SC. et al. TrimAl: a Tool for automatic alignment trimming. Bioinformatics. 2009; 25, 1972-1973. doi.org/10.1093/bioinformatics/btp348\n\n" >> ${output_dir}/citations.txt

if [ $prodigal_used == "true" ]; then
    prodigal_version=$(prodigal -v 2>&1 | grep Prodigal | tr -s " " "\t" | cut -f 2 | tr -d ":" | sed 's/V/v/')
    printf "Prodigal ${prodigal_version}\nHyatt, D. et al. Gene and translation initiation site prediction in metagenomic sequences. Bioinformatics. 2010; 28, 2223-2230. doi.org/10.1186/1471-2105-11-119\n\n" >> ${output_dir}/citations.txt
fi

if [ $taxonkit_used == "true" ]; then
    taxonkit_version=$(taxonkit -h | grep Version | tr -s " " "\t" | cut -f 2)
    printf "TaxonKit v${taxonkit_version}\nShen W and Ren H. TaxonKit: a practical and efficient NCBI Taxonomy toolkit. Journal of Genetics and Genomics. 2021. doi.org/10.1016/j.jgg.2021.03.006\n\n" >> ${output_dir}/citations.txt
fi

if [ $kofamscan_used == "true" ]; then
    kofamscan_version=$(exec_annotation -v | cut -f 2 -d " ")
    printf "KOfamScan ${kofamscan_version}\nAramaki, T et al. KofamKOALA: KEGG Ortholog assignment based on profile HMM and adaptive score threshold. Bioinformatics. 2020. doi.org/10.1093/bioinformatics/btz859\n\n" >> ${output_dir}/citations.txt
fi

if [ $pfam_db_used == "true" ]; then
    printf "Pfam database\nMistry J et al. Pfam: the protein families database in 2021. Nucleic Acids Research. 2021. doi.org/10.1093/nar/gkaa913\n\n" >> ${output_dir}/citations.txt
fi

if [ $gtdb_used == "true" ]; then
    printf "Genome Taxonomy Database (GTDB) ${gtdb_version}; ${gtdb_release_date}\nParks DH et al. A complete domain-to-species taxonomy for Bacteria and Archaea. Nat. Biotech. 2020. doi.org/10.1038/s41587-020-0501-8\n\n" >> ${output_dir}/citations.txt
fi

if [ $veryfasttree_used == "true" ]; then
    veryfasttree_version=$(VeryFastTree -h | head -n 1 | cut -f 2 -d " ")
    printf "VeryFastTree v${veryfasttree_version}\nPineiro C et al. VeryFastTree: speeding up the estimation of phylogenies for large alignments through parallelization and vectorization strategies. Bioinformatics. 2020. doi.org/10.1093/bioinformatics/btaa582\n\n" >> ${output_dir}/citations.txt
    fasttree_used="true" # setting so the fasttree citation is included too since this is built off of that
fi

if [ $fasttree_used == "true" ]; then
    if [ $veryfasttree_used == "true" ]; then
        printf "FastTree2 (VeryFastTree, noted above, is an optimized re-implementation of FastTree2, so you should probably cite both even though FastTree2 wasn't directly used here.)\nPrice MN et al. FastTree 2 - approximately maximum-likelihood trees for large alignments. PLoS One. 2010; 5. doi.org/10.1371/journal.pone.0009490\n\n" >> ${output_dir}/citations.txt
    else
        fasttree_version=$(FastTree -expert 2>&1 | head -n 1 | tr -s " " "\t" | cut -f 5)
        printf "FastTree2 v${fasttree_version}\nPrice MN et al. FastTree2 - approximately maximum-likelihood trees for large alignments. PLoS One. 2010; 5. doi.org/10.1371/journal.pone.0009490\n\n" >> ${output_dir}/citations.txt
    fi
fi

if [ $iqtree_used == "true" ]; then
    iqtree_version=$(iqtree -V | head -n 1 | tr -s " " "\t" | cut -f 4)
    printf "IQ-TREE v${iqtree_version}\nNguyen L-T et al. IQ-TREE: a fast and effective stochastic algorithm for estimating maximum likelihood phylogenies. Mol. Biol. Evol. 2015; 32, 268-274. doi.org/10.1093/molbev/msu300\n" >> ${output_dir}/citations.txt
    printf "Kalyaanamoorthy et al. ModelFinder: fast model selection for accurate phylogenetic estimates. Nat. Methods 2017; 14:587-589. doi.org/10.1038/nmeth.4285\n" >> ${output_dir}/citations.txt
    # bootstrap only used if greater than 4 genomes
    if [ $genomes_retained -ge 4 ]; then
        printf "Hoang et al. UFBoot2: Improving the ultrafast bootstrap approximation. Mol. Biol. Evol. 2018; 35:518-522. doi.org/10.1093/molbev/msx281\n\n" >> ${output_dir}/citations.txt
    else
        printf "\n" >> ${output_dir}/citations.txt
    fi

fi

if [ $parallel_used == "true" ]; then
    parallel_version=$(parallel --version | head -n 1 | tr -s " " "\t" | cut -f 3)
    printf "GNU Parallel v${parallel_version}\nTange O. GNU Parallel 2018. doi.org/10.5281/zenodo.1146014\n\n" >> ${output_dir}/citations.txt
fi

if [ $universal_SCGs_used == "true" ]; then
    printf "Universal SCG-set\nHug LA et al. A new view of the tree of life. Nat. Microbiol. 2016; 1, 1-6. doi.org/10.1038/NMICROBIOL.2016.48\n\n" >> ${output_dir}/citations.txt
fi

duration=$SECONDS

printf "\n                                         Total process runtime: $(($duration / 60 / 60)) hours and $((($duration / 60) % 60)) minutes.\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )

today=$(date +'%A')

printf "                                                      ${GREEN}Happy $today :)${NC}\n\n" | tee >( sed 's/\x1b\[[0-9;]*m//g' >> ${gtotree_log} )

mv $gtotree_log ${output_dir}/gtotree-runlog.txt
