#!/usr/bin/env bash

# setting colors to use
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'


#############################################################################
################################  HELP INFO  ################################
#############################################################################
## called by program name with no arguments or with "-h" as only positional argument ##
if [ "$#" == 0 ] || [ $1 == "-h" ] || [ $1 == "help" ]; then


  printf "\n ############################################################################## \n"
  printf "                     GToTree - still under initial development\n\n"

  printf "  This program takes input genomes from various sources and ultimately produces\n"
  printf "  a phylogenomic tree. You can find detailed usage information at:\n"
  printf "                                  github.com/AstrobioMike/GToTree/wiki\n"

  printf "\n    Required inputs include:\n\n"
  printf "      1) Input genomes in one or any combination of the following formats:\n"
  printf "        - [-a <file>] single-column file of NCBI assembly accessions\n"
  printf "        - [-g <file>] single-column file with the path to each GenBank file\n"
  printf "        - [-f <file>] single-column file with the path to each fasta file\n\n"

  printf "      2)  [-H <file>] the uncompressed hmm file being used\n\n"

  printf "    Optional arguments include:\n\n"

  printf "        - [-m <file>] specify desired genome IDs of input genomes\n"
  printf "                  A two-column tab-delimited file where column 1 holds either the\n"
  printf "                  file name or the NCBI accession of the genome to name (depending\n"
  printf "                  on the input source), and column 2 holds the desired new genome ID.\n"
  printf "                  (does not need to specify all input genomes)\n\n"

  printf "        - [-t ] default: false\n"
  printf "                  Provide this flag with no arguments if you'd like to add lineage\n"
  printf "                  info to the sequence headers for any genomes with NCBI taxids.\n"
  printf "                  (requires Taxonkit)\n\n"

  printf "        - [-c <float>] default: 0.2\n" 
  printf "                  A float between 0-1 specifying the range about the median of\n"
  printf "                  sequences to be retained. For example, if the median length of a\n"
  printf "                  set of sequences is 100 AAs, those seqs longer than 120 or shorter\n"
  printf "                  than 80 will be filtered out before alignment of that gene set\n\n"

  printf "        - [-G <float>] default: 0.75\n"
  printf "                  A float between 0-1 specifying the minimum fraction of hits a\n"
  printf "                  genome must have of the SCG-set. For example, if there are 100\n"
  printf "                  target genes in the HMM profile, and Genome X only has hits to 74\n"
  printf "                  of them, it will be removed from analysis.\n\n"

  printf "        - [-d ] default: false\n"
  printf "                  Provide this flag with no arguments if you'd like to keep the\n"
  printf "                  temporary directory. (mostly useful for debugging)\n\n"

  printf "        - [-n <int> ] default: 2\n"
  printf "                  The number of cpus you'd like ot use during the HMM search.\n\n"

  printf "    Example usage:\n\n\t GToTree -a ncbi_accessions.txt -g genbank_files.txt -f fasta_files.txt -H Lee_BSCGs.hmm -t\n\n"

  printf " ############################################################################## \n\n"

  exit
fi


#############################################################################
############################  PARSING ARGUMENTS  ############################
#############################################################################
## setting boolean defaults
taxonkit_id_swap='false'
debug_flag='false'

while getopts :a:g:f:H:m:tc:G:dn: args
do
  case "${args}"
  in
    a) NCBI_acc_file=${OPTARG};;
    g) genbank_list_file=${OPTARG};;
    f) fasta_files=${OPTARG};;
    H) hmm_file=${OPTARG};;
    m) file_to_genome_id_map=${OPTARG};;
    t) taxonkit_id_swap='true';;
    c) len_cutoff=${OPTARG};;
    G) gen_cutoff=${OPTARG};;
    d) debug_flag='true';;
    n) num_cpus=${OPTARG};;
    \?) printf "\n  Invalid argument: -${OPTARG}\n\n  Run with no arguments or '-h' only to see help menu.\n\n" >&2 && exit
  esac
done


# checking if taxonkit is available if it was specified
if [ $taxonkit_id_swap != "false" ]; then
  if ! command -v taxonkit > /dev/null; then
    printf "\n  ${RED}You specified to add lineages to headers, but TaxonKit doesn't seem to be callable.${NC}\n"
    printf "\nExiting for now.\n\n"
    exit
  fi
fi


# checking numeric inputs and setting defaults if not provided
if [ -z $len_cutoff ]; then
  len_cutoff="0.2"
  mult_len_cut=$(echo "$len_cutoff * 100" | bc | cut -f 1 -d ".") # just storing for later use
else
  # checking is in 0-1 range (bash can't compare floats so multiplying first)
  mult_len_cut=$(echo "$len_cutoff * 100" | bc | cut -f 1 -d ".")

  if ! [ ${mult_len_cut} -ge 0 -a ${mult_len_cut} -le 100 ]; then
    printf "\n  ${RED}The gene-length cutoff proportion (\"-c\") needs to be between 0-1.${NC}\n"
    printf "\nExiting for now.\n\n"
    exit
  fi
fi

if [ -z $gen_cutoff ]; then
  gen_cutoff="0.75"
  mult_gen_cut=$(echo "$gen_cutoff * 100" | bc | cut -f 1 -d ".") # just storing for later use
else
  # checking is in 0-1 range (bash can't compare floats so multiplying first)
  mult_gen_cut=$(echo "$gen_cutoff * 100" | bc | cut -f 1 -d ".")

  if ! [ ${mult_gen_cut} -ge 0 -a ${mult_gen_cut} -le 100 ]; then
    printf "\n  ${RED}The minimum genome gene-copy proportion (\"-G\") needs to be between 0-1.${NC}\n"
    printf "\nExiting for now.\n\n"
    exit
  fi
fi

if [ -z $num_cpus ]; then
  num_cpus=2
else
  # checking is an integer
  if ! [[ $num_cpus =~ ^[0-9]+$ ]]; then
    printf "\n  ${RED}The value provided for cpus (\"-n\") needs to be an integer.${NC}\n"
    printf "\nExiting for now.\n\n"
    exit
  fi
fi


#############################################################################
############  MAKING SURE MINIMUM REQUIRED INPUTS WERE PROVIDED  ############
#############################################################################
if [ ! -n "$NCBI_acc_file" ] && [ ! -n "$genbank_list_file" ] && [ ! -n "$fasta_files" ]; then
  printf "\n  ${RED}You need to provide some input genome source!${NC}\n"
  printf "\nExiting for now.\n\n"
  exit
fi

if [ ! -n "$hmm_file" ]; then
  printf "\n  ${RED}You need to provide the HMM file of the genes you want to tree!${NC}\n"
  printf "\nExiting for now.\n\n"
  exit
fi




#############################################################################
########## CHECKING INPUT GENOME SOURCES AND SPECIFIC DEPENDENCIES ##########
#############################################################################
printf "\n    Input genome sources include:\n"

if [ -n "$NCBI_acc_file" ]; then
  if ! command -v epost > /dev/null; then
    printf "\n  ${RED}NCBI's E-Direct is required when providing accessions.${NC}\n"
    printf "\nExiting for now.\n\n"
    exit
  fi

  if [ -f "$NCBI_acc_file" ]; then
    NCBI_input_genomes_total=$(wc -l $NCBI_acc_file | sed "s/^ *//" | cut -d " " -f 1)
    printf "      - NCBI accessions listed in $NCBI_acc_file ($NCBI_input_genomes_total genomes)\n"
  else
    printf "\n${RED}      You specified $NCBI_acc_file as a source of NCBI genomes to use, but that file cannot be found :(${NC}\n"
    printf "\nExiting for now.\n\n"
    exit
  fi
else 
  NCBI_input_genomes_total=0
fi

if [ -n "$genbank_list_file" ];then
  if [ -f "$genbank_list_file" ]; then
    genbank_genomes_total=$(wc -l $genbank_list_file | sed "s/^ *//" | cut -d " " -f 1)
    printf "      - Genbank files listed in $genbank_list_file ($genbank_genomes_total genomes)\n"
  else
    printf "\n${RED}      You specified $genbank_list_file as a source of genbank files to use, but that file cannot be found :(${NC}\n"
    printf "\nExiting for now.\n\n"
    exit
  fi
else
  genbank_genomes_total=0
fi

if [ -n "$fasta_files" ]; then
  if ! command -v prodigal > /dev/null; then
    printf "\n  ${RED}Prodigal is required when providing fasta files.${NC}\n"
    printf "\nExiting for now.\n\n"
    exit
  fi
  
  if [ -f "$fasta_files" ]; then
    fasta_genomes_total=$(wc -l $fasta_files | sed "s/^ *//" | cut -d " " -f 1)
    printf "      - Fasta files listed in $fasta_files ($fasta_genomes_total genomes)\n"
  else
    printf "\n${RED}      You specified $fasta_files as a source of fasta files to use, but that file cannot be found :(${NC}\n"
    printf "\nExiting for now.\n\n"
    exit
  fi
else
  fasta_genomes_total=0
fi

# reporting total number of planned genomes
total_input_genomes=$(($NCBI_input_genomes_total + $genbank_genomes_total + $fasta_genomes_total))
printf "\n                             ${GREEN}Total input genomes: $total_input_genomes${NC}\n"



#############################################################################
###############  CHECKING AND REPORTING SPECIFIED HMM SOURCE  ###############
#############################################################################
#### checking and reporting specified hmm source ####
printf "\n    HMM source to be used:\n"

if [ -f "$hmm_file" ]; then
  grep "^NAME" $hmm_file | tr -s " " | cut -f2 -d " " > uniq_hmm_names.tmp
  hmm_target_genes_total=$(wc -l uniq_hmm_names.tmp | sed "s/^ *//" | cut -d " " -f 1)
  printf "      - $hmm_file ($hmm_target_genes_total targets)\n"
elif [ -f "${GToTree_HMM_dir}/${hmm_file}" ]; then
  hmm_file="${GToTree_HMM_dir}/${hmm_file}"
  grep "^NAME" $hmm_file | tr -s " " | cut -f2 -d " " > uniq_hmm_names.tmp
  hmm_target_genes_total=$(wc -l uniq_hmm_names.tmp | sed "s/^ *//" | cut -d " " -f 1)
  printf "      - ${hmm_file} ($hmm_target_genes_total targets)\n"
else
  printf "\n${RED}      You specified $hmm_file as your HMM file to use, but that file cannot be found :(${NC}\n"
  printf "\nExiting for now.\n\n"
  exit
fi




#############################################################################
##############  EXPLICITLY STATING IF DEFAULT BEHAVIOR CHANGED  #############
#############################################################################
if [ -n "$file_to_genome_id_map" ] || [ $taxonkit_id_swap != "false" ] || [ $len_cutoff != "0.2" ] || [ $gen_cutoff != "0.75" ] || [ $debug_flag == "true" ]; then

  if [ -n "$file_to_genome_id_map" ]; then
    if [ ! -f "$file_to_genome_id_map" ]; then
      printf "\n${RED}      You specified $file_to_genome_id_map, but that file cannot be found :(${NC}\n"
      printf "\nExiting for now.\n\n"
      exit
    fi
  fi

  printf "\n\n    Options set:\n"

  if [ -n "$file_to_genome_id_map" ]; then
    printf "      - The file $file_to_genome_id_map will be used to label the specified genomes.\n"
  fi

  if [ $taxonkit_id_swap != "false" ]; then
    printf "      - Taxonkit will be used to add lineage info to headers.\n"
  fi

  if [ $len_cutoff != "0.2" ]; then
    printf "      - Gene-length filtering cutoff threshold (\"-c\") has been set to $len_cutoff.\n"
  fi

  if [ $gen_cutoff != "0.75" ]; then
    printf "      - Genome minimum gene-copy threshold (\"-G\") has been set to $gen_cutoff.\n"
  fi

  if [ $debug_flag == "true" ]; then
    printf "      - Debug mode on. Temp directory won't be removed after run.\n"
  fi


fi

printf "\n"

sleep 3


#############################################################################
###############  CREATE A TEMP DIRECTORY AND EXITING IF FAILS  ##############
#############################################################################
tmp_dir=$(date +%s)
tmp_dir=${tmp_dir}.tmpdir

mkdir $tmp_dir 2> /dev/null

if [ $? -ne 0 ] ; then
  printf "\n${RED}  Tried to make temporary directory named ${tmp_dir} but failed, this shouldn't happen :(${NC}\n"
  rm uniq_hmm_names.tmp
  printf "Exiting for now.\n\n"
  exit
fi

### making sure each id provided in the mapping file (if given) is found in one 
### of the genome input files 
if [ -n "$file_to_genome_id_map" ]; then
  cat $NCBI_acc_file $genbank_list_file $fasta_files | sort > ${tmp_dir}/sorted_all_input_genome_ids.tmp
  comm -23 <(cut -f1 $file_to_genome_id_map | sort) ${tmp_dir}/sorted_all_input_genome_ids.tmp > ${tmp_dir}/spurious_ids.tmp
  if [ -s ${tmp_dir}/spurious_ids.tmp ]; then
    spurious_ids_count=$(wc -l ${tmp_dir}/spurious_ids.tmp | sed "s/^ *//" | cut -d " " -f 1)
    mv ${tmp_dir}/spurious_ids.tmp Missing_IDs.txt
    rm -rf $tmp_dir

    printf "\n${RED}  $spurious_ids_count genome ID(s) listed in the mapping file (passed to \"-m\") not found in${NC}\n"
    printf "  ${RED}any of the input genomes :(${NC}\n\n"
    printf "  Reported in the file \"Missing_IDs.txt\" for you to investigate.\n\n"
    printf "Exiting for now.\n\n"
    exit
  fi
fi
    #### add in check that all provided in here are in the inputs... or 
    #### maybe put that down later when doing this and just write out the ones not found


# moving uniq_hmm_names.tmp into temp directory now that all is well
mv uniq_hmm_names.tmp ${tmp_dir}/uniq_hmm_names.tmp

# starting an all genomes file to keep track of those from all sources
touch ${tmp_dir}/genomes_from_all_sources.tmp


#############################################################################
########################  KEEPING TRACK OF RUN TIME  ########################
#############################################################################
start_time=$(date +"%I:%M %p")
SECONDS=0




#############################################################################
#####################  NCBI-DERIVED GENOME PROCESSING  ######################
#############################################################################
if [ -n "$NCBI_acc_file" ]; then


  printf "\n ############################################################################## \n"
  printf " ####          Starting on the genomes provided as NCBI accessions         ####\n"
  printf " ############################################################################## \n\n"

  # storing sorted ncbi accession file
  sort $NCBI_acc_file > ${tmp_dir}/sorted_ncbi_accs.tmp

  # creating info file with E-Direct:
  epost -db assembly -format acc -input ${tmp_dir}/sorted_ncbi_accs.tmp | esummary | xtract -pattern DocumentSummary -def "NA" -element AssemblyAccession Taxid SpeciesTaxid Organism AssemblyStatus RefSeq_category FtpPath_GenBank > ${tmp_dir}/ncbi_accessions_info.tmp

  # checking and reporting if any accs weren't successfully found
  # need to take into account that people may be pulling with the GenBank (GCA_*) or RefSeq (GCF_*) accession
  # and i seem to universally get one back or the other from the search
  # so going to crop off the start and use just the numbers to compare to find if any weren't found

  sed 's/GC._//' ${tmp_dir}/sorted_ncbi_accs.tmp | sort > ${tmp_dir}/sorted_base_wanted_ncbi_accs.tmp
  cut -f1 ${tmp_dir}/ncbi_accessions_info.tmp | sed 's/GC._//' | sort > ${tmp_dir}/sorted_base_got_ncbi_accs.tmp

  comm -23 ${tmp_dir}/sorted_base_wanted_ncbi_accs.tmp ${tmp_dir}/sorted_base_got_ncbi_accs.tmp > ${tmp_dir}/base_not_found_accs.tmp

  for missed_acc in $(cat ${tmp_dir}/base_not_found_accs.tmp)
  do
    grep -m1 "$missed_acc" ${tmp_dir}/sorted_ncbi_accs.tmp
  done > ${tmp_dir}/not_found_accs.tmp

  if [ -s ${tmp_dir}/not_found_accs.tmp ]; then
    num_accs_not_found=$(wc -l ${tmp_dir}/not_found_accs.tmp | sed "s/^ *//" | cut -d " " -f 1)
    printf "     ${RED}******************************* ${NC}NOTICE ${RED}*******************************${NC}  \n"
    printf "\t        $num_accs_not_found accession(s) not successfully found at NCBI.\n\n"
    printf "\t         Reported in \"NCBI_accessions_not_found.txt\".\n"
    printf "     ${RED}**********************************************************************${NC}  \n\n"

    sleep 3

    cp ${tmp_dir}/not_found_accs.tmp NCBI_accessions_not_found.txt

    comm -23 ${tmp_dir}/sorted_ncbi_accs.tmp <(sort ${tmp_dir}/not_found_accs.tmp) | sort > ${tmp_dir}/updated_sorted_ncbi_accs.tmp
    NCBI_remaining_genomes_total=$(wc -l ${tmp_dir}/updated_sorted_ncbi_accs.tmp | sed "s/^ *//" | cut -d " " -f 1)

  else
    mv ${tmp_dir}/sorted_ncbi_accs.tmp ${tmp_dir}/updated_sorted_ncbi_accs.tmp
    NCBI_remaining_genomes_total=$(wc -l ${tmp_dir}/updated_sorted_ncbi_accs.tmp | sed "s/^ *//" | cut -d " " -f 1)

  fi

  ## now for the GCA/GCF issue noted above, going to tack on a column of the input assembly accessions 
  # making sure the files are in the same order for pasting
  for got_acc in $(cat ${tmp_dir}/sorted_base_got_ncbi_accs.tmp)
  do
    grep -m1 "$got_acc" ${tmp_dir}/ncbi_accessions_info.tmp >> ${tmp_dir}/ncbi_accessions_info2.tmp
    grep -m1 "$got_acc" ${tmp_dir}/updated_sorted_ncbi_accs.tmp >> ${tmp_dir}/sorted_input_ncbi_accs.tmp
  done

  # and adding input accession to the front 
  paste ${tmp_dir}/sorted_input_ncbi_accs.tmp ${tmp_dir}/ncbi_accessions_info2.tmp > ${tmp_dir}/ncbi_accessions_info.tmp

  # creating the ncbi-derived-genome output table file which will have the following as its header:
  printf "input_accession\tdownloaded_accession\tassembly_name\ttaxid\torganism_name\tinfraspecific_name\tuniq_SCG_hits\tperc_comp\tperc_redund\n" > NCBI_genomes_summary_info.tsv

  # setting a counter to track how far along we are
  num=0

  # looping through the lines of the provided [-a] file (this loop operates on one genome at a time)
  while IFS=$'\t' read -r -a curr_line

  do

    assembly="${curr_line[0]}"
    downloaded_accession="${curr_line[1]}"

    num=$((num+1)) # to track progress

    printf "   --------------------------------------------------------------------------   \n"
    printf "\tOn assembly ${GREEN}$assembly${NC}; Number $num of $NCBI_remaining_genomes_total total.\n"
    printf "   --------------------------------------------------------------------------   \n\n"

    # storing links to download stuff in variables
    base_link="${curr_line[7]}"
    end_path=$(basename $base_link)

    # downloading the report file to be able to easily pull more info about the assembly:
    printf "      Downloading genome report and genes files...\n\n"
    curl --silent --connect-timeout 5 --max-time 10 --retry 5 --retry-max-time 30 -o report1.tmp "${base_link}/${end_path}_assembly_report.txt"

    # downloading the protein-coding sequences for the assembly
    curl --silent --connect-timeout 5 --max-time 10 --retry 5 --retry-max-time 30 -o genes.tmp.gz "${base_link}/${end_path}_protein.faa.gz"

    # checking both files downloaded successfully, if not, writing problem accesion to file "NCBI_accessions_not_downloaded.txt" and moving on to next:
    if [ -s report1.tmp ]; then
      if [ -s genes.tmp.gz ]; then
        gunzip genes.tmp.gz
      else # trying to get assembly if there were no gene annotations available
        curl --silent --connect-timeout 5 --max-time 10 --retry 5 --retry-max-time 30 -o genome.tmp.gz "${base_link}/${end_path}_genomic.fna.gz"
        
        if [ -s genome.tmp.gz ]; then

          gunzip genome.tmp.gz

          printf "     ${RED}******************************* ${NC}NOTICE ${RED}*******************************${NC}  \n"
          printf "  \t$assembly doesn't appear to have gene annotations associated with it.\n\n"
          printf "  \tSo we downloaded the genome and are identifying coding sequences with prodigal.\n"
          printf "     ${RED}********************************************************************** ${NC}\n\n"

          printf "      Getting coding seqs...\n\n"
          prodigal -c -q -i genome.tmp -a genes1.tmp > /dev/null
          tr -d '*' < genes1.tmp > genes2.tmp

          ## renaming seqs to have assembly name
          gtt-rename-fasta-headers -i genes2.tmp -w $assembly -o genes.tmp
        else
          printf "     ${RED}******************************* ${NC}NOTICE ${RED}*******************************${NC}  \n"
          printf "  \t$assembly's genes nor genome downloaded properly :(\n\n"
          printf "  \tIt's been added to the file \"NCBI_accessions_not_downloaded.txt\"\n"
          printf "     ${RED}************************************************************************ ${NC}\n"
          rm -rf report1.tmp genes.tmp.gz
          sleep 3
          echo $assembly >> NCBI_accessions_not_downloaded.txt
        fi
      fi

      # fixing the stupid carriage returns that for some reason NCBI assembly reports have in them...
      tr "\r" "\n" < report1.tmp > report.tmp

      # storing more info about the assembly to write out into ncbi-derived-genome summary file (for each setting to NA if not found)
      ass_name=$(grep "Assembly name:" report.tmp | cut -f2 -d ":" | sed 's/^ *//')
      if [ -z "$ass_name" ]; then ass_name="NA"; fi
      org_name=$(grep "Organism name:" report.tmp | cut -f2 -d ":" | sed 's/^ *//')
      if [ -z "$org_name" ]; then org_name="NA"; fi
      infraspecific_name=$(grep "Infraspecific name:" report.tmp | cut -f2 -d ":" | sed 's/^ *//')
      if [ -z "$infraspecific_name" ]; then infraspecific_name="NA"; fi
      taxid=$(grep "Taxid:" report.tmp | cut -f2 -d ":" | sed 's/^ *//')
      if [ -z "$taxid" ]; then taxid="NA"; fi

      printf "      Performing HMM search...\n"
      
      ### running hmm search ###
      hmmsearch --cut_ga --cpu $num_cpus --tblout curr_hmm_hits.tmp $hmm_file genes.tmp > /dev/null

      ### calculating % completion and redundancy ###
      for SCG in $(cat ${tmp_dir}/uniq_hmm_names.tmp)
      do
        grep -w -c "$SCG" curr_hmm_hits.tmp
      done > uniq_counts.tmp

      num_SCG_hits=$(awk ' $1 > 0 ' uniq_counts.tmp | wc -l | tr -s " " | cut -f2 -d " ")

      
      printf "        Found $num_SCG_hits of the targeted $hmm_target_genes_total SCGs.\n\n"

      num_SCG_redund=$(awk '{ if ($1 == 0) { print $1 } else { print $1 - 1 } }' uniq_counts.tmp | awk '{ sum += $1 } END { print sum }')

      perc_comp=$(echo "$num_SCG_hits / $hmm_target_genes_total * 100" | bc -l)
      perc_comp_rnd=$(printf "%.2f\n" $perc_comp)
      perc_redund=$(echo "$num_SCG_redund / $hmm_target_genes_total * 100" | bc -l)
      perc_redund_rnd=$(printf "%.2f\n" $perc_redund)

      ## writing summary info to table ##
      printf "$assembly\t$downloaded_accession\t$ass_name\t$taxid\t$org_name\t$infraspecific_name\t$num_SCG_hits\t$perc_comp_rnd\t$perc_redund_rnd\n" >> NCBI_genomes_summary_info.tsv

      ### Pulling out hits for this genome ###
      # making fasta file searchable to pull out the hits (Easel 0.45h June 2018)
      esl-sfetch --index genes.tmp > /dev/null

      # looping through ribosomal proteins and pulling out each first hit (hmm results tab is sorted by e-value):
      # does as a separate loop just for clarity (well, in hopes of clarity)
      for SCG in $(cat ${tmp_dir}/uniq_hmm_names.tmp)
      do
        grep -w "$SCG" curr_hmm_hits.tmp | awk '!x[$3]++' | cut -f1 -d " " | esl-sfetch -f genes.tmp - | sed "s/>.*$/>$assembly/" | sed 's/^Usage.*$//' | sed 's/^To see.*$//' | sed '/^$/d' >> ${tmp_dir}/${SCG}_hits.faa
      done

      rm *.tmp
      rm *.tmp.ssi

    else
      printf "     ${RED}******************************* ${NC}NOTICE ${RED}*******************************${NC}  \n"
      printf "  \t$assembly did not download properly :(\n\n"
      printf "  \tIt's been added to the file \"NCBI_accessions_not_downloaded.txt\"\n"
      printf "     ${RED}************************************************************************ ${NC}\n"
      rm -rf report1.tmp genes.tmp.gz
      sleep 3
      echo $assembly >> NCBI_accessions_not_downloaded.txt
    fi

  done < ${tmp_dir}/ncbi_accessions_info.tmp

  printf "\n________________________________________________________________________________\n\n"

  
  ## reporting any accessions not successfully found or downloaded, and updating files
  printf "     ******************************* UPDATE *******************************  \n"
  printf "        Of the input genomes provided by NCBI accession:\n\n"

  if [ -f NCBI_accessions_not_found.txt ]; then
    num_accs_not_found=$(wc -l NCBI_accessions_not_found.txt | sed "s/^ *//" | cut -d " " -f 1)
    printf "          ${RED}$num_accs_not_found accession(s) not found at NCBI.${NC}\n" 
    printf "            Reported in \"NCBI_accessions_not_found.txt\".\n\n"
  fi

  if [ -f NCBI_accessions_not_downloaded.txt ]; then
    num_accs_not_downloaded=$(wc -l NCBI_accessions_not_downloaded.txt | sed "s/^ *//" | cut -d " " -f 1)

    comm -23 ${tmp_dir}/updated_sorted_ncbi_accs.tmp <(sort NCBI_accessions_not_downloaded.txt) | sort > ${tmp_dir}/updated_sorted_ncbi_accs2.tmp
    mv ${tmp_dir}/updated_sorted_ncbi_accs2.tmp ${tmp_dir}/final_included_NCBI_accs.tmp

    printf "          ${RED}$num_accs_not_downloaded provided NCBI accessions did not download successfully.${NC}\n" 
    printf "            Reported in \"NCBI_accessions_not_downloaded.txt\".\n\n"

  else
    mv ${tmp_dir}/updated_sorted_ncbi_accs.tmp ${tmp_dir}/final_included_NCBI_accs.tmp
  fi

  if [ -f NCBI_accessions_not_found.txt ] || [ -f NCBI_accessions_not_downloaded.txt ]; then
    num_retained_ncbi_input_genomes=$(wc -l ${tmp_dir}/final_included_NCBI_accs.tmp | sed "s/^ *//" | cut -d " " -f 1)

    printf "        $num_retained_ncbi_input_genomes of the total $NCBI_input_genomes_total genomes provided by NCBI accession were\n"
    printf "        successfully downloaded and searched.\n"
  else
    printf "        ${GREEN}All $NCBI_input_genomes_total genomes provided NCBI accessions successfully downloaded and searched :)${NC}\n"
  fi

  printf "     ********************************************************************** \n\n\n"

  # adding to genomes from all sources file
  cat ${tmp_dir}/final_included_NCBI_accs.tmp >> ${tmp_dir}/genomes_from_all_sources.tmp

fi




#############################################################################
####################  GENBANK-DERIVED GENOME PROCESSING  ####################
#############################################################################
if [ -n "$genbank_list_file" ]; then

  printf "\n ############################################################################## \n"
  printf " ####          Starting on the genomes provided as GenBank files           ####\n"
  printf " ############################################################################## \n\n"

  curr_time=$(date +"%I:%M %p")
  duration=$SECONDS

  printf "           It is currently $curr_time; the process started at $start_time.\n"
  printf "               Current process runtime: $(($duration / 60 / 60)) hours and $((($duration / 60) % 60)) minutes.\n\n"

  # setting a counter to track how far along we are
  num=0

  # creating the genbank-genome-derived output table which will have the following as its header:
  printf "assembly_name\toriginal_file_name\ttaxid\torganism_name\tuniq_SCG_hits\tperc_comp\tperc_redund\n" > Genbank_genomes_summary_info.tsv

  # looping through the lines of the provided [-g] file (this loop operates on one genome at a time)
  while IFS=$'\t' read -r -a file

  do

    assembly="${file%.*}"

    # adding assembly to ongoing genomes list
    echo $assembly >> ${tmp_dir}/genbank_genomes_list.tmp

    num=$((num+1)) # to track progress

    printf "   --------------------------------------------------------------------------   \n"
    printf "\tOn assembly ${GREEN}$assembly${NC}; Number $num of $genbank_genomes_total total.\n"
    printf "   --------------------------------------------------------------------------   \n\n"

    # storing more info about the assembly if it's present in the genbank file:
    # checking for organism:
    if grep -q "ORGANISM" $file; then 
      org_name=$(grep -m1 "ORGANISM" $file | tr -s " " | cut -f3- -d " " | tr "[ ./\\]" "_" | tr -s "_")
    else
      org_name="NA"
    fi

    if grep -q "taxon" $file; then
      taxid=$(grep -m1 "taxon" $file | cut -f2 -d ":" | tr -d '"')
    else
      taxid="NA"
    fi

    # extracting AA coding sequences from genbank file
    gtt-genbank-to-AA-seqs -i $file -o genes.tmp

    # checking that the file had CDS annotations
    if [ ! -s genes.tmp ]; then

      printf "     ${RED}******************************* ${NC}NOTICE ${RED}*******************************${NC}  \n"
      printf "  \tThis genbank file doesn't appear to have CDS annotations, so we\n"
      printf "  \tare identifying coding sequences with prodigal.\n\n"

      printf "  \tIt was added to the file \"Genbank_files_with_no_CDSs.txt\".\n"
      printf "     ${RED}**********************************************************************${NC}  \n\n"

      echo "$file" >> Genbank_files_with_no_CDSs.txt
      rm genes.tmp

      # pulling out full nucleotide fasta from genbank file
      gtt-genbank-to-fasta -i $file -o fasta.tmp

      printf "      Getting coding seqs...\n\n"

      # running prodigal
      prodigal -c -q -i fasta.tmp -a genes1.tmp > /dev/null
      tr -d '*' < genes1.tmp > genes2.tmp

      ## renaming seqs to have assembly name
      gtt-rename-fasta-headers -i genes2.tmp -w $assembly -o genes.tmp
    fi

    printf "      Performing HMM search...\n"
      
    ### running hmm search ###
    hmmsearch --cut_ga --cpu $num_cpus --tblout curr_hmm_hits.tmp $hmm_file genes.tmp > /dev/null

    ### calculating % completion and redundancy ###
    for SCG in $(cat ${tmp_dir}/uniq_hmm_names.tmp)
    do
        grep -w -c "$SCG" curr_hmm_hits.tmp
    done > uniq_counts.tmp

    num_SCG_hits=$(awk ' $1 > 0 ' uniq_counts.tmp | wc -l | tr -s " " | cut -f2 -d " ")
  
    printf "        Found $num_SCG_hits of the targeted $hmm_target_genes_total.\n\n"

    num_SCG_redund=$(awk '{ if ($1 == 0) { print $1 } else { print $1 - 1 } }' uniq_counts.tmp | awk '{ sum += $1 } END { print sum }')

    perc_comp=$(echo "$num_SCG_hits / $hmm_target_genes_total * 100" | bc -l)
    perc_comp_rnd=$(printf "%.2f\n" $perc_comp)
    perc_redund=$(echo "$num_SCG_redund / $hmm_target_genes_total * 100" | bc -l)
    perc_redund_rnd=$(printf "%.2f\n" $perc_redund)

    ## writing summary info to table ##
    printf "$assembly\t$file\t$taxid\t$org_name\t$num_SCG_hits\t$perc_comp_rnd\t$perc_redund_rnd\n" >> Genbank_genomes_summary_info.tsv

    ### Pulling out hits for this genome ###
    # making fasta file searchable to pull out the hits (Easel 0.45h June 2018)
    esl-sfetch --index genes.tmp > /dev/null

    # looping through ribosomal proteins and pulling out each first hit (hmm results tab is sorted by e-value):
    # done as a separate loop just for clarity (well, in hopes of clarity)
    for SCG in $(cat ${tmp_dir}/uniq_hmm_names.tmp)

    do
      grep -w "$SCG" curr_hmm_hits.tmp | awk '!x[$3]++' | cut -f1 -d " " | esl-sfetch -f genes.tmp - | sed "s/>.*$/>$assembly/" | sed 's/^Usage.*$//' | sed 's/^To see.*$//' | sed '/^$/d' >> ${tmp_dir}/${SCG}_hits.faa
    done

    rm *.tmp
    rm *.tmp.ssi

  done < $genbank_list_file

  mv ${tmp_dir}/genbank_genomes_list.tmp ${tmp_dir}/final_included_genbank_genomes.tmp

  # adding retained genomes to genomes from all sources file
  cat ${tmp_dir}/final_included_genbank_genomes.tmp >> ${tmp_dir}/genomes_from_all_sources.tmp

  printf "________________________________________________________________________________\n\n\n"

fi




#############################################################################
#####################  FASTA-DERIVED GENOME PROCESSING  #####################
#############################################################################
if [ -n "$fasta_files" ]; then

  printf "\n ############################################################################## \n"
  printf " ####           Starting on the genomes provided as fasta files            ####\n"
  printf " ############################################################################## \n\n"

  curr_time=$(date +"%I:%M %p")
  duration=$SECONDS

  printf "           It is currently $curr_time; the process started at $start_time.\n"
  printf "               Current process runtime: $(($duration / 60 / 60)) hours and $((($duration / 60) % 60)) minutes.\n\n"

  # setting a counter to track how far along we are
  num=0

  # creating the genbank-genome-derived output table which will have the following as its header:
  printf "Assembly_name\tOriginal_file_name\ttaxid\tuniq_SCG_hits\tperc_comp\tperc_redund\n" > Fasta_genomes_summary_info.tsv

  # looping through the lines of the provided [-g] file (this loop operates on one genome at a time)
  while IFS=$'\t' read -r -a file

  do

    # setting assembly name as filename with no extension
    assembly="${file%.*}"

    # adding assembly to ongoing genomes list
    echo $assembly >> ${tmp_dir}/fasta_genomes_list.tmp

    num=$((num+1)) # to track progress

    printf "   --------------------------------------------------------------------------   \n"
    printf "\tOn assembly ${GREEN}$assembly${NC}; Number $num of $fasta_genomes_total total.\n"
    printf "   --------------------------------------------------------------------------   \n\n"

    printf "      Getting coding seqs...\n\n"

    ## running prodigal to get coding sequences
    prodigal -c -q -i $file -a genes1.tmp > /dev/null
    tr -d '*' < genes1.tmp > genes2.tmp

    ## renaming seqs to have assembly name
    gtt-rename-fasta-headers -i genes2.tmp -w $assembly -o genes.tmp

    printf "      Performing HMM search...\n"
      
    ### running hmm search ###
    hmmsearch --cut_ga --cpu $num_cpus --tblout curr_hmm_hits.tmp $hmm_file genes.tmp > /dev/null

    ### calculating % completion and redundancy ###
    for SCG in $(cat ${tmp_dir}/uniq_hmm_names.tmp)
    do
        grep -w -c "$SCG" curr_hmm_hits.tmp
    done > uniq_counts.tmp

    num_SCG_hits=$(awk ' $1 > 0 ' uniq_counts.tmp | wc -l | tr -s " " | cut -f2 -d " ")
  
    printf "        Found $num_SCG_hits of the targeted $hmm_target_genes_total.\n\n"

    num_SCG_redund=$(awk '{ if ($1 == 0) { print $1 } else { print $1 - 1 } }' uniq_counts.tmp | awk '{ sum += $1 } END { print sum }')

    perc_comp=$(echo "$num_SCG_hits / $hmm_target_genes_total * 100" | bc -l)
    perc_comp_rnd=$(printf "%.2f\n" $perc_comp)
    perc_redund=$(echo "$num_SCG_redund / $hmm_target_genes_total * 100" | bc -l)
    perc_redund_rnd=$(printf "%.2f\n" $perc_redund)

    # adding NA for taxid so final table can still have the column and lineage for those that do have them
    taxid="NA"

    ## writing summary info to table ##
    printf "$assembly\t$file\t$taxid\t$num_SCG_hits\t$perc_comp_rnd\t$perc_redund_rnd\n" >> Fasta_genomes_summary_info.tsv

    ### Pulling out hits for this genome ###
    # making fasta file searchable to pull out the hits (Easel 0.45h June 2018)
    esl-sfetch --index genes.tmp > /dev/null

    # looping through ribosomal proteins and pulling out each first hit (hmm results tab is sorted by e-value):
    # done as a separate loop just for clarity (well, in hopes of clarity)
    for SCG in $(cat ${tmp_dir}/uniq_hmm_names.tmp)

    do
      grep -w "$SCG" curr_hmm_hits.tmp | awk '!x[$3]++' | cut -f1 -d " " | esl-sfetch -f genes.tmp - | sed "s/>.*$/>$assembly/" | sed 's/^Usage.*$//' | sed 's/^To see.*$//' | sed '/^$/d' >> ${tmp_dir}/${SCG}_hits.faa
    done

    rm *.tmp
    rm *.tmp.ssi

  done < $fasta_files

  # adding retained genomes to genomes from all sources file
  cat ${tmp_dir}/fasta_genomes_list.tmp >> ${tmp_dir}/genomes_from_all_sources.tmp

  printf "_______________________________________________________________________________\n\n\n"

fi



#############################################################################
#############################  FILTERING GENES  #############################
#############################################################################
printf "\n ############################################################################## \n"
printf " ####                     Filtering genes by length                        ####\n"
printf " ############################################################################## \n\n"

printf "     Keeping those with lengths within ${mult_len_cut}%% of the median for the gene set.\n\n"

curr_time=$(date +"%I:%M %p")
duration=$SECONDS

printf "           It is currently $curr_time; the process started at $start_time.\n"
printf "               Current process runtime: $(($duration / 60 / 60)) hours and $((($duration / 60) % 60)) minutes.\n\n\n"

### first checking that all genes have some sequences, if not, removing from gene list ###
for SCG in $(cat ${tmp_dir}/uniq_hmm_names.tmp)
do
  if [ ! -s ${tmp_dir}/${SCG}_hits.faa ]; then
    echo "$SCG"
  fi
done > ${tmp_dir}/genes_to_remove.tmp

# removing those genes, if any:
comm -23 <(sort ${tmp_dir}/uniq_hmm_names.tmp) <(sort ${tmp_dir}/genes_to_remove.tmp) > ${tmp_dir}/updated_genes_list.tmp

removed_genes=$(wc -l ${tmp_dir}/genes_to_remove.tmp | sed "s/^ *//" | cut -d " " -f 1)

# reporting
if [ $removed_genes != "0" ]; then
  printf "     ${RED}******************************* ${NC}NOTICE ${RED}*******************************${NC}  \n"
  printf "\t    $removed_genes gene(s) had no hits in any genome... Just so ya know!\n\n"
  printf "\t\t  Not found:\n\n"
  sed 's/^/                   /' ${tmp_dir}/genes_to_remove.tmp
  printf "     ${RED}**********************************************************************${NC}  \n\n\n"
fi


### filtering out sequences that are too long or too short ###
# creating short R scripts for getting filtering lengths
echo "lengths <- scan(\"lengths.tmp\", quiet=TRUE)
med <- median(lengths)
buff <- med*${len_cutoff}
minimum <- round(med - buff)
cat(minimum)" > ${tmp_dir}/min.R

echo "lengths <- scan(\"lengths.tmp\", quiet=TRUE)
med <- median(lengths)
buff <- med*${len_cutoff}
maximum <- round(med + buff)
cat(maximum)" > ${tmp_dir}/max.R

for SCG in $(cat ${tmp_dir}/updated_genes_list.tmp)
do

  printf "   --------------------------------------------------------------------------   \n"
  printf "\n    Filtering ${GREEN}$SCG${NC} sequences by length...\n"

  gtt-count-bases-per-seq -i ${tmp_dir}/${SCG}_hits.faa -o Num_bps.tmp
  cut -f2 Num_bps.tmp > lengths.tmp
  min_len=$(Rscript ${tmp_dir}/min.R)
  max_len=$(Rscript ${tmp_dir}/max.R)
  gtt-filter-seqs-by-length -i ${tmp_dir}/${SCG}_hits.faa -m $min_len -M $max_len -o ${tmp_dir}/${SCG}_hits_filtered.tmp

  rm Num_bps.tmp lengths.tmp

done

### removing genes again if they had all filtered, which really shouldn't happen unless there are very few sequences (like when testing) ###
for SCG in $(cat ${tmp_dir}/updated_genes_list.tmp)
do
  if [ ! -s ${tmp_dir}/${SCG}_hits_filtered.tmp ]; then
    echo "$SCG"
  fi
done > ${tmp_dir}/genes_to_remove2.tmp

# removing those genes, if any:
comm -23 <(sort ${tmp_dir}/updated_genes_list.tmp) <(sort ${tmp_dir}/genes_to_remove2.tmp) > ${tmp_dir}/final_genes_list.tmp

removed_genes=$(wc -l ${tmp_dir}/genes_to_remove2.tmp | sed "s/^ *//" | cut -d " " -f 1)

# reporting
if [ $removed_genes != "0" ]; then
  printf "     ${RED}******************************* ${NC}NOTICE ${RED}*******************************${NC}  \n"
  printf "  \t$removed_genes gene(s) had no hits in any genomes after filtering for length! Just so ya know...\n\n"
  printf "    \tLength-filtered out of existence:\n\n"
  sed 's/^/          /' ${tmp_dir}/genes_to_remove2.tmp
  printf "     ${RED}************************************************************************ ${NC}\n\n"
fi

new_hmm_target_genes_total=$(wc -l ${tmp_dir}/final_genes_list.tmp | sed "s/^ *//" | cut -d " " -f 1)

printf "________________________________________________________________________________ \n\n\n"


#############################################################################
############################  FILTERING GENOMES  ############################
#############################################################################
### removing genomes with hits to fewer than 75% of the total SCGs targeted ###
printf "\n ############################################################################## \n"
printf " ####                Filtering genomes with too few hits                   ####\n"
printf " ############################################################################## \n\n"

printf "     Removing those with fewer than ${mult_gen_cut}%% of the total SCGs targeted.\n\n"

curr_time=$(date +"%I:%M %p")
duration=$SECONDS

printf "           It is currently $curr_time; the process started at $start_time.\n"
printf "               Current process runtime: $(($duration / 60 / 60)) hours and $((($duration / 60) % 60)) minutes.\n\n"


# setting cutoff threshold (need to have this many hits or are genome is removed)
cutoff=$(echo "${gen_cutoff}*${new_hmm_target_genes_total}" | bc)
cutoff=$(printf "%0.f\n" $cutoff)

cat ${tmp_dir}/*_hits_filtered.tmp > ${tmp_dir}/all_seqs.tmp

for i in $(cat ${tmp_dir}/genomes_from_all_sources.tmp)
do
  grep -c -w "^>$i" ${tmp_dir}/all_seqs.tmp

done > ${tmp_dir}/counts.tmp

paste ${tmp_dir}/genomes_from_all_sources.tmp ${tmp_dir}/counts.tmp > ${tmp_dir}/counts_tab.tmp

awk -F "\t" -v cutoff="$cutoff" '$2 < cutoff { print $0 }' ${tmp_dir}/counts_tab.tmp | tee Genomes_removed_for_too_few_hits.tsv | cut -f1 | sort > ${tmp_dir}/sorted_genomes_to_remove.tmp

# getting updated genome list with these removed from it:
comm -23 <(sort ${tmp_dir}/genomes_from_all_sources.tmp) ${tmp_dir}/sorted_genomes_to_remove.tmp > ${tmp_dir}/final_genomes_from_all_sources.tmp

removed_genomes=$(wc -l ${tmp_dir}/sorted_genomes_to_remove.tmp | sed "s/^ *//" | cut -d " " -f 1)

# reporting if any genomes removed for too few hits
if [ $removed_genomes != "0" ]; then
  printf "     ${RED}*******************************${NC} NOTICE ${RED}*******************************${NC}  \n"
  printf "  \t$removed_genomes genome(s) removed from analysis due to having too few hits.\n\n"
  printf "  \tReported in \"Genomes_removed_for_too_few_hits.tsv\".\n"
  printf "     ${RED}********************************************************************** ${NC}\n\n"
  sleep 3
else
  printf "             ${GREEN}No genomes were removed for having too few hits :)${NC}\n\n"

  rm Genomes_removed_for_too_few_hits.tsv
  sleep 3
fi

printf "________________________________________________________________________________\n\n\n"


#############################################################################
#############  ALIGNING, TRIMMING, AND INSERTING GAP-SEQUENCES  #############
#############################################################################
printf "\n ############################################################################## \n"
printf " ####          Aligning, trimming, and inserting gap-sequences             ####\n"
printf " ############################################################################## \n\n"

curr_time=$(date +"%I:%M %p")
duration=$SECONDS

printf "           It is currently $curr_time; the process started at $start_time.\n"
printf "               Current process runtime: $(($duration / 60 / 60)) hours and $((($duration / 60) % 60)) minutes.\n"

# setting new counter
num=0

for SCG in $(cat ${tmp_dir}/final_genes_list.tmp)

do

  num=$((num+1))

  printf "\n\n\n   --------------------------------------------------------------------------   \n"
  printf "\t    Aligning and cleaning gene ${GREEN}$SCG${NC}; Number $num of $new_hmm_target_genes_total.\n"
  printf "   --------------------------------------------------------------------------   \n"

  # removing those genomes that need to be removed based on not having enough hits to the target genes
  gtt-parse-fasta-by-headers -i ${tmp_dir}/${SCG}_hits_filtered.tmp -w ${tmp_dir}/sorted_genomes_to_remove.tmp -o ${tmp_dir}/${SCG}_hits_filtered.faa --inverse

  # aligning
  muscle -in ${tmp_dir}/${SCG}_hits_filtered.faa -diags -out ${tmp_dir}/aligned.tmp
  # trimming
  trimal -in ${tmp_dir}/aligned.tmp -out ${tmp_dir}/trimmed.faa.tmp -automated1

  # removing linewraps:
  sed 's/ .*$//' ${tmp_dir}/trimmed.faa.tmp | awk '!/^>/ { printf "%s", $0; n="\n" } /^>/ { print n $0; n = "" } END { printf "%s", n }' > ${tmp_dir}/formatted.faa.tmp

  ## adding gap-sequences for genomes missing the current gene ##
  # finding here which ones have it
  grep ">" ${tmp_dir}/formatted.faa.tmp | tr -d ">" | sort > ${tmp_dir}/genomes_with_gene.tmp

  # now getting which ones don't have it
  comm -23 ${tmp_dir}/final_genomes_from_all_sources.tmp ${tmp_dir}/genomes_with_gene.tmp | sort > ${tmp_dir}/needed_gappers.tmp

  # creating gap-sequences if needed
  if [ -s ${tmp_dir}/needed_gappers.tmp ]; then
  
    # making a headers file for when making fasta in a few steps:
    sed 's/^/>/' ${tmp_dir}/needed_gappers.tmp > ${tmp_dir}/needed_headers.tmp

    # getting length of the alignment for the current gene:
    aln_length_tmp=$(sed -n '2p' ${tmp_dir}/formatted.faa.tmp | wc -c | tr -s " " | cut -f2 -d " ")
    # subtracting 1 for newline characters 
    aln_length_tmp=$(echo "$aln_length_tmp"-1 | bc)
    # making a string of gaps the length of the alignment for those missing it:
    gap_seq=$(printf "%0.s-" $(seq 1 1 $aln_length_tmp))
    # making as many gap sequences as there are genomes missing the current gene:
    num_genomes_to_add=$(wc -l ${tmp_dir}/needed_gappers.tmp | tr -s " " "\t" | cut -f2)
    for i in $(cat ${tmp_dir}/needed_gappers.tmp)
    do
      echo "$gap_seq"
    done > ${tmp_dir}/gaps.tmp

    # making fasta of those genomes missing the current gene:
    paste -d "\n" ${tmp_dir}/needed_headers.tmp ${tmp_dir}/gaps.tmp > ${tmp_dir}/missing_genomes.faa.tmp
    # catting the genomes missing the current gene together with those that have it
    cat ${tmp_dir}/formatted.faa.tmp ${tmp_dir}/missing_genomes.faa.tmp > ${tmp_dir}/${SCG}.faa.tmp
  else
    mv ${tmp_dir}/formatted.faa.tmp ${tmp_dir}/${SCG}.faa.tmp
  fi
  
  ## reordering the final fasta of this gene so that all gene sets can be pasted together at end ##
  gtt-reorder-fasta -i ${tmp_dir}/${SCG}.faa.tmp -w ${tmp_dir}/final_genomes_from_all_sources.tmp -o ${tmp_dir}/${SCG}_all_aligned.faa

done

printf "\n\n\n________________________________________________________________________________\n\n\n"


#############################################################################
######################  MAKING SUMMARY TABLE WITH ALL  ######################
#############################################################################
if [ -f NCBI_genomes_summary_info.tsv ]; then
  cut -f 1,4,7,8,9 NCBI_genomes_summary_info.tsv | tail -n +2 >> ${tmp_dir}/building_genomes_tab.tmp
fi

if [ -f Genbank_genomes_summary_info.tsv ]; then
  cut -f 1,3,5,6,7 Genbank_genomes_summary_info.tsv | tail -n +2 >> ${tmp_dir}/building_genomes_tab.tmp
fi

if [ -f Fasta_genomes_summary_info.tsv ]; then
  cut -f 1,3,4,5,6 Fasta_genomes_summary_info.tsv | tail -n +2 >> ${tmp_dir}/building_genomes_tab.tmp
fi

cat <(printf "assembly_id\ttaxid\tuniq_SCG_hits\tperc_comp\tperc_redund\n") ${tmp_dir}/building_genomes_tab.tmp > All_genomes_summary_info.tsv



#############################################################################
#####################  CATTING ALL ALIGNMENTS TOGETHER  #####################
#############################################################################
printf "\n ############################################################################## \n"
printf " ####                  Catting all alignments together                     ####\n"
printf " ############################################################################## \n\n"

curr_time=$(date +"%I:%M %p")
duration=$SECONDS

printf "           It is currently $curr_time; the process started at $start_time.\n"
printf "               Current process runtime: $(($duration / 60 / 60)) hours and $((($duration / 60) % 60)) minutes.\n\n"

# putting a string of 5 X's in between each gene 
paste ${tmp_dir}/*_all_aligned.faa > ${tmp_dir}/cat.tmp
grep ">" ${tmp_dir}/cat.tmp | cut -f1 > ${tmp_dir}/headers.tmp
grep -v ">" ${tmp_dir}/cat.tmp | sed -e $'s/\t/XXXXX/g' > ${tmp_dir}/seqs.tmp
paste -d "\n" ${tmp_dir}/headers.tmp ${tmp_dir}/seqs.tmp > FINAL_aligned_SCGs.faa

# storing genomes that made it through workflow to report at end
genomes_retained=$(wc -l ${tmp_dir}/final_genomes_from_all_sources.tmp | sed "s/^ *//" | cut -d " " -f 1)

printf "\n________________________________________________________________________________\n\n\n"




#############################################################################
#############################################################################
###############  ADDING MORE INFORMATIVE HEADERS IF SPECIFIED  ##############
#############################################################################
#############################################################################
## making copy of alignment file to preserve original
if [ -n "$file_to_genome_id_map" ] || [ $taxonkit_id_swap != "false" ]; then
  cp FINAL_aligned_SCGs.faa ${tmp_dir}/FINAL_aligned_SCGs_mod_names.tmp

  printf "\n ############################################################################## \n"
  printf " ####                   Adding more informative headers                    ####\n"
  printf " ############################################################################## \n\n"

  ## building id swap file starting with mapping file if provided
  if [ -n "$file_to_genome_id_map" ]; then
    ## making sorted list of targets to change
    cut -f1 $file_to_genome_id_map | sort > ${tmp_dir}/sorted_target_ids_to_change.tmp

    ## separating out which ones are ncbi accessions (because the others need to have their extension removed)
    for acc in $(cut -f1 NCBI_genomes_summary_info.tsv | tail -n +2)
    do
      grep -w -m1 "$acc" $file_to_genome_id_map
    done | tee ${tmp_dir}/ncbi_id_swap_map.tmp | cut -f 1 | sort > ${tmp_dir}/sorted_ncbi_ids_to_swap.tmp

    ## getting which are not ncbi accessions
    comm -23 ${tmp_dir}/sorted_target_ids_to_change.tmp ${tmp_dir}/sorted_ncbi_ids_to_swap.tmp > ${tmp_dir}/non_ncbi_ids_to_swap.tmp

    ## removing extensions
    for file in $(cut -f1 ${tmp_dir}/non_ncbi_ids_to_swap.tmp)
    do
      echo "${file%.*}"
    done > ${tmp_dir}/non_ncbi_old_ids_to_swap.tmp

    # for file in $(cut -f1 $file_to_genome_id_map)
    # do
    #   echo "${file%.*}"
    # done > ${tmp_dir}/old_ids.tmp
    
    ## getting desired new ids for these
    for id in $(cat ${tmp_dir}/non_ncbi_old_ids_to_swap.tmp)
    do
      grep -m1 $"id" $file_to_genome_id_map
    done | cut -f 2 > ${tmp_dir}/non_ncbi_new_ids.tmp

    ## sticking non-ncbi new and old together formatted for swapping, and catting with the ncbi ones
    cat <(paste ${tmp_dir}/non_ncbi_old_ids_to_swap.tmp ${tmp_dir}/non_ncbi_new_ids.tmp) ${tmp_dir}/ncbi_id_swap_map.tmp > ${tmp_dir}/id_swap_map.tmp

  fi

  ## now if taxonkit was specified, adding those to swap file too but only
  ## renaming genomes with a taxid that are NOT in the user-provided mapping file
  if [ $taxonkit_id_swap != "false" ]; then

    ## running taxonkit and adding to summary table ##
    cut -f 2 All_genomes_summary_info.tsv | tail -n +2 | taxonkit lineage | taxonkit reformat -r NA | cut -f3 | tr ";" "\t" > ${tmp_dir}/lineages.tmp

    cat <(printf "domain\tphylum\tclass\torder\tfamily\tgenus\tspecific_name\n") ${tmp_dir}/lineages.tmp > ${tmp_dir}/lineages2.tmp

    paste All_genomes_summary_info.tsv ${tmp_dir}/lineages2.tmp > All_genomes_summary_info2.tsv
    mv All_genomes_summary_info2.tsv All_genomes_summary_info.tsv

    ## getting genomes that have a taxid
    awk ' BEGIN { FS=OFS="\t" } $2 != "NA" ' All_genomes_summary_info.tsv | tail -n +2 | cut -f1 > ${tmp_dir}/potential_ids_for_swap.tmp
    ## removing those that the user already provided new labels for, if they did
    if [ -f ${tmp_dir}/id_swap_map.tmp ]; then
      comm -23 <(sort ${tmp_dir}/potential_ids_for_swap.tmp) <(cut -f1 ${tmp_dir}/id_swap_map.tmp | sort) > ${tmp_dir}/ids_for_taxonkit_swap.tmp
    else
      mv ${tmp_dir}/potential_ids_for_swap.tmp ${tmp_dir}/ids_for_taxonkit_swap.tmp
    fi
    
    ## creating new labels for them based on lineage info
    for id in $(cat ${tmp_dir}/ids_for_taxonkit_swap.tmp)
    do
      grep -w -m1 "$id" All_genomes_summary_info.tsv
    done | cut -f 1,6,7,8,12 | tr "\t" "_" | tr " " "_" | tr "(" "_" | tr ")" "_" | tr "/" "_" | sed 's/__/_/g' | sed 's/_$//' | tr -d "['.\[\]]" > ${tmp_dir}/new_ids_for_taxonkit_swap.tmp

    ## pasting together and adding to the id_swap_map.tmp if other user-specified IDs were given

    if [ -f ${tmp_dir}/id_swap_map.tmp ]; then
      cat ${tmp_dir}/id_swap_map.tmp <(paste ${tmp_dir}/ids_for_taxonkit_swap.tmp ${tmp_dir}/new_ids_for_taxonkit_swap.tmp) > ${tmp_dir}/full_id_swap_map.tmp
    else
      paste ${tmp_dir}/ids_for_taxonkit_swap.tmp ${tmp_dir}/new_ids_for_taxonkit_swap.tmp > ${tmp_dir}/full_id_swap_map.tmp
    fi
  fi

  ### now swapping ids 
  gtt-swap-ids -i ${tmp_dir}/FINAL_aligned_SCGs_mod_names.tmp -s ${tmp_dir}/full_id_swap_map.tmp -o FINAL_aligned_SCGs_mod_names.faa

  ### adding new ids to summary table as column "label"
  # first pulling out and adding to those that were changed
  for changed_id in $(cut -f1 ${tmp_dir}/full_id_swap_map.tmp)
  do
    grep -w -m1 "$changed_id" All_genomes_summary_info.tsv
  done | cut -f 2- > ${tmp_dir}/building_new_genomes_tab1.tmp

  paste ${tmp_dir}/full_id_swap_map.tmp ${tmp_dir}/building_new_genomes_tab1.tmp > ${tmp_dir}/building_new_genomes_tab2.tmp

  # now getting those that weren't changed and adding assembly id to the "label" column
  comm -23 <(cut -f1 All_genomes_summary_info.tsv | tail -n +2 | sort) <(cut -f1 ${tmp_dir}/full_id_swap_map.tmp | sort) > ${tmp_dir}/unchanged_ids.tmp

  for unchanged_id in $(cat ${tmp_dir}/unchanged_ids.tmp)
  do
    grep -w -m1 "$unchanged_id" All_genomes_summary_info.tsv
  done > ${tmp_dir}/building_new_genomes_tab3.tmp

  paste ${tmp_dir}/unchanged_ids.tmp ${tmp_dir}/building_new_genomes_tab3.tmp > ${tmp_dir}/building_new_genomes_tab4.tmp

  head -n 1 All_genomes_summary_info.tsv > ${tmp_dir}/old_header.tmp

  # making new header
  paste <(cut -f 1 ${tmp_dir}/old_header.tmp) <(printf "label") <(cut -f 2- ${tmp_dir}/old_header.tmp) > ${tmp_dir}/new_header.tmp

  # now sticking all together into a new summary table that includes any adjusted labels
  cat ${tmp_dir}/new_header.tmp ${tmp_dir}/building_new_genomes_tab2.tmp ${tmp_dir}/building_new_genomes_tab4.tmp > All_genomes_summary_info.tsv

  printf "\n________________________________________________________________________________\n\n\n"

fi

# clearing out temp files unless debug_flag is set to true
if [ $debug_flag == 'false' ]; then
  rm -rf $tmp_dir
fi

#############################################################################
############################  RUNNING FASTTREE  #############################
#############################################################################

printf "\n ############################################################################## \n"
printf " ####                          Running FastTree                            ####\n"
printf " ############################################################################## \n\n"

curr_time=$(date +"%I:%M %p")
duration=$SECONDS

printf "           It is currently $curr_time; the process started at $start_time.\n"
printf "               Current process runtime: $(($duration / 60 / 60)) hours and $((($duration / 60) % 60)) minutes.\n\n"


if [ $taxonkit_id_swap != "false" ]; then
  FastTree FINAL_aligned_SCGs_mod_names.faa > FINAL_aligned_SCGs_mod_names.tre
else
  FastTree FINAL_aligned_SCGs.faa > FINAL_aligned_SCGs.tre
fi



#############################################################################
##########################  JOB-FINISHED REPORTING  #########################
#############################################################################

printf "\n\n#################################################################################\n"
printf "####                                 ${GREEN}Done!!${NC}                                  ####\n"
printf "#################################################################################\n\n"


# genome report
if [ $genomes_retained == $total_input_genomes ]; then
  printf "            ${GREEN}All $total_input_genomes input genomes were retained through the workflow!${NC}\n\n\n"
else
  printf "    Overall, $genomes_retained input genomes of the input $total_input_genomes were retained. (see notes below)\n\n\n"
fi

# reporting primary output files
printf "    Full alignment written to file \"${GREEN}FINAL_aligned_SCGs.faa${NC}\".\n\n"
if [ $taxonkit_id_swap != "false" ]; then
  printf "    Alignment with altered headers written to file \"${GREEN}FINAL_aligned_SCGs_mod_names.faa${NC}\".\n\n"
  printf "    Tree written to file \"${GREEN}FINAL_aligned_SCGs_mod_names.tre${NC}\".\n\n"
else
  printf "    Tree written to file \"${GREEN}FINAL_aligned_SCGs.tre${NC}\".\n\n"
fi

printf "    Summary file with comp./redund. estimates written to file \"${GREEN}All_genomes_summary_info.tsv${NC}\".\n\n"


# reporting any problem files/accessions
if [ -f NCBI_accessions_not_found.txt ] || [ -f NCBI_accessions_not_downloaded.txt ] || [ -f Genbank_files_with_no_CDSs.txt ] || [ -f Genomes_removed_for_too_few_hits.tsv ]; then
  printf "\n  Notes:\n\n"

  if [ -f NCBI_accessions_not_found.txt ]; then
    num_accs_not_found=$(wc -l NCBI_accessions_not_found.txt | sed "s/^ *//" | cut -d " " -f 1)
    printf "    ${RED}$num_accs_not_found accession(s) not successfully found at NCBI.${NC}\n" 
    printf "        Reported in \"NCBI_accessions_not_found.txt\".\n\n"
  fi

  if [ -f NCBI_accessions_not_downloaded.txt ]; then
    num_accs_not_downloaded=$(wc -l NCBI_accessions_not_downloaded.txt | sed "s/^ *//" | cut -d " " -f 1)
    printf "    ${RED}$num_accs_not_downloaded did not download properly.${NC}\n" 
    printf "        Reported in \"NCBI_accessions_not_downloaded.txt\".\n\n"
  fi

  if [ -f Genomes_removed_for_too_few_hits.tsv ]; then
    num_genomes_removed_too_few_hits=$(wc -l Genomes_removed_for_too_few_hits.tsv | sed "s/^ *//" | cut -d " " -f 1)
    printf "    ${RED}$num_genomes_removed_too_few_hits genome(s) removed due to having too few hits to the targeted SCGs.${NC}\n" 
    printf "        Reported in \"Genomes_removed_for_too_few_hits.tsv\".\n\n"
  fi


  if [ -f Genbank_files_with_no_CDSs.txt ]; then
    num_genbanks_no_cds=$(wc -l Genbank_files_with_no_CDSs.txt | sed "s/^ *//" | cut -d " " -f 1)
    printf "    $num_genbanks_no_cds genbank file(s) had no indentified coding sequences.\n"
    printf "        Reported in \"Genbank_files_with_no_CDSs.txt\", but\n"
    printf "        these were processed as though submitted as flat fasta files.\n\n"
  fi

  printf "\n"

fi

duration=$SECONDS

printf "                                         Total process runtime: $(($duration / 60 / 60)) hours and $((($duration / 60) % 60)) minutes.\n\n"
